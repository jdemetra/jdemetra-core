<!--
Copyright 2016 National Bank of Belgium

Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
by the European Commission - subsequent versions of the EUPL (the "Licence");
You may not use this work except in compliance with the Licence.
You may obtain a copy of the Licence at:

http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software 
distributed under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and 
limitations under the Licence.
-->


<xs:schema version="0.1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="ec/eurostat/jdemetra/core"
           xmlns:tss="ec/eurostat/jdemetra/core"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    <xs:include schemaLocation="core.xsd"/>

    <!--Calendars-->

    <xs:simpleType name="DayEvent">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NewYear" />
            <xs:enumeration value="AshWednesday" />
            <xs:enumeration value="Easter" />
            <xs:enumeration value="EasterThursday" />
            <xs:enumeration value="EasterFryday" />
            <xs:enumeration value="EasterMonday" />
            <xs:enumeration value="Ascension" />
            <xs:enumeration value="Pentecost" />
            <xs:enumeration value="WhitMonday" />
            <xs:enumeration value="Assumption" />
            <xs:enumeration value="AllSaintsDay" />
            <xs:enumeration value="Christmas" />
            <xs:enumeration value="LaborDay" />
            <xs:enumeration value="Thanksgiving" />
            <xs:enumeration value="MayDay" />
            <xs:enumeration value="Halloween" />
        </xs:restriction>
    </xs:simpleType>

  <xs:simpleType name="LengthOfPeriodEnum">
    <xs:annotation>
      <xs:documentation>
        Leap year or equivalent
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="LeapYear" />
      <xs:enumeration value="LengthOfPeriod" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TradingDaysEnum">
    <xs:annotation>
      <xs:documentation>
        Trading days or equivalent
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="TradingDays" />
      <xs:enumeration value="WorkingDays" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="DayType" abstract="true">
      <xs:attribute name="Weight" type="xs:double" use="optional"/>
   </xs:complexType>
    
    <xs:complexType name="FixedDayType">
        <xs:annotation>
            <xs:documentation>
                Fixed day in each year, identified by the month and the day in the month.
                Example: 21th of July
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:DayType">
                <xs:sequence>
                     <xs:element name="Month" type="tss:MonthEnum" />
                    <xs:element name="Day" type="xs:int" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="FixedWeekDayType">
        <xs:annotation>
            <xs:documentation>
                Fixed week day, identified by the day if the week, the week of the month and the month.
                Example: Labor Day, second tuesday of september.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:DayType">
                <xs:sequence>
                    <xs:element name="Month" type="tss:MonthEnum" />
                    <xs:element name="DayofWeek" type="tss:DayOfWeekEnum" />
                    <xs:element name="Week" type="tss:WeekEnum"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="EasterRelatedDayType">
        <xs:annotation>
            <xs:documentation>
                Day identified by its position related to Easter.
                Example: 20th day after Easter.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:DayType">
                <xs:sequence>
                    <xs:element name="Offset" type="xs:short" />
                </xs:sequence>
                <xs:attribute name="julian" type="xs:boolean" use="optional" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="SpecialCalendarDayType">
        <xs:annotation>
            <xs:documentation>
                Day identified by its position related to some prespecified days.
                Example: 3 days after Christmas, 1 day before Labor Day...
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Event" type="tss:DayEvent" />
            <xs:element name="Offset" type="xs:short" default="0" minOccurs="0" />
         </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SpecialDayEventType">
        <xs:annotation>
            <xs:documentation>
                A special day event is a special day, valid on a given time span.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Day" type="tss:DayType"/>
            <xs:group ref="tss:TimeSpan" id="Validity" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AbstractCalendarType" abstract="true">
        <xs:attribute name="name" type="xs:ID" use="required" />
    </xs:complexType>

    <xs:complexType name="NationalCalendarType">
        <xs:annotation>
            <xs:documentation>
                A national calendar is defined by a list of special day events. It may have a name,
                which may be used in derived calendars
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:AbstractCalendarType">
                <xs:sequence>
                    <xs:element name="SpecialDayEvent" type="tss:SpecialDayEventType" maxOccurs="unbounded" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="CompositeCalendarType">
        <xs:annotation>
            <xs:documentation>
                A composite calendar is a weighted sum of other calendars, identified by their IDs.
                Those calendars should be stored in a given dictionary.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:AbstractCalendarType">
                <xs:sequence>
                    <xs:element name="WeightedCalendar" type="tss:WeightedItem" maxOccurs="unbounded" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ChainedCalendarType">
        <xs:annotation>
            <xs:documentation>
                A chained calendar is a pair of calendars, which are paste from a given date.
                More precisely, the first calendar is used up to the given date (excluded) and is replaced
                by the second calendar from that date (included)
                Both calendars should be stored in a given dictionary.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tss:AbstractCalendarType">
                <xs:sequence>
                    <xs:element name="StartCalendar" type="xs:IDREF" />
                    <xs:element name="EndCalendar" type="xs:IDREF" />
                    <xs:element name="CalendarBreak" type="xs:date" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

 
    <xs:complexType name="CalendarsType">
        <xs:annotation>
            <xs:documentation>
                Collection of calendars.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Calendar" type="tss:AbstractCalendarType" minOccurs="0" maxOccurs="unbounded"/>        
        </xs:sequence>
    </xs:complexType>

    <xs:element name="Calendars" type="tss:CalendarsType"/>

</xs:schema>