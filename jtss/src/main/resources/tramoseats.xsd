<?xml version="1.0"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->

<xs:schema version="0.1.0"
           targetNamespace="ec/eurostat/jdemetra/sa/tramoseats"
           xmlns:tss="ec/eurostat/jdemetra/core"
           xmlns:sa="ec/eurostat/jdemetra/sa"
           xmlns:trs="ec/eurostat/jdemetra/sa/tramoseats"
           xmlns:modelling="ec/eurostat/jdemetra/modelling"
           xmlns:regarima="ec/eurostat/jdemetra/modelling/regarima"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified">

    <xs:import schemaLocation="regarima.xsd" namespace="ec/eurostat/jdemetra/core"/>
    <xs:import schemaLocation="processing.xsd" namespace="ec/eurostat/jdemetra/core"/>
    <xs:import schemaLocation="sacore.xsd" namespace="ec/eurostat/jdemetra/sa"/>
    <xs:import schemaLocation="modelling.xsd" namespace="ec/eurostat/jdemetra/modelling"/>
 
    <!--Enums-->

    <xs:simpleType name="ApproximationModeEnum">
        <xs:annotation>
            <xs:documentation>
                Actions in case of non-decomposable models
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="None" />
            <xs:enumeration value="Legacy" />
            <xs:enumeration value="Noisy" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="SeatsEstimationMethodEnum">
        <xs:annotation>
            <xs:documentation>
                Method used to estimate the components in SEATS
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="Burman" />
            <xs:enumeration value="KalmanSmoother" />
            <xs:enumeration value="Matrix" />
        </xs:restriction>
    </xs:simpleType>
    <!--Transformation-->
    
    <xs:complexType name="AutoTransformationSpecType">
        <xs:sequence>
            <xs:element name="Fct" minOccurs="0" default="0.95">
                <xs:annotation>
                    <xs:documentation>
                        Controls the bias in the log/level pretest.
                        Greater than 1 favors levels; lesser than 1 favors logs.
                        Default value is .95.
                        Fct should be in the range [0.5, 2].
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0.5" />
                        <xs:maxInclusive value="2.0" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="TransformationSpecGroup">
        <xs:choice>
            <xs:element name="Log">
                <xs:annotation>
                    <xs:documentation>
                        Corresponds to LAM=0.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Auto" type ="trs:AutoTransformationSpecType">
                <xs:annotation>
                    <xs:documentation>
                        Corresponds to LAM=-1.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:group>

    <xs:complexType name="TransformationSpecType">
        <xs:complexContent>
            <xs:extension base="modelling:TransformationSpecType">
                <xs:sequence>
                    <xs:group ref="trs:TransformationSpecGroup" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!--Estimation-->

    <xs:complexType name="EstimationSpecType">
        <xs:complexContent>
            <xs:extension base="modelling:EstimationSpecType">
                <xs:sequence>
                    <xs:element name="EML" type="xs:boolean" minOccurs="0" default="true">
                        <xs:annotation>
                            <xs:documentation>
                                Corresponds to the "TYPE" parameter. O for eml=true, 1 for eml=false.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="UBP" minOccurs="0" default="0.96">
                        <xs:annotation>
                            <xs:documentation>
                                Corresponds to the UBP parameter.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minExclusive value="0.5" />
                                <xs:maxInclusive value="1.0" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--Regression-->

    <xs:complexType name="RegressionSpecType">
        <xs:complexContent>
            <xs:extension base="modelling:RegressionSpecType">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--Arima modelling-->

    <xs:complexType name="AutoModellingSpecType">
        <xs:sequence>
            <xs:element name="PCR" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Level of significance for the Ljung-Box Q-test used in automatic model identification.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0.8" />
                        <xs:maxExclusive value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="UB1" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        If one of the roots in the “AR(2)xARs(1) plus mean” estimation
                        (in the first step of the automatic identification of the differencing polynomial)
                        is larger than ub1, in modulus, it is set equal to unity.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0.8" />
                        <xs:maxExclusive value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="UB2" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        If one of the roots in the “ARMA(1,1)xARMAs(1,1) plus mean” estimation
                        (in the second step of the automatic model identification)
                        is larger than ub2, in modulus, it is set equal to unity.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="0.7" />
                        <xs:maxExclusive value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Cancel" default="0.1" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        If the difference in moduli of an AR and an MA root
                        (when estimating Arma(1,1) x Arma s(1,1) models in
                        the second step of the automatic identifcation of the
                        differencing polynomial) is smaller than "cancel", the
                        two roots cancel out.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minExclusive value="0.0" />
                        <xs:maxInclusive value="0.2" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Tsig" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Minimum t for significant mean.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minExclusive value="0.0" />
                        <xs:maxInclusive value="2.0" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="PC" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Percentage by which va is reduced in the second round
                        (when outliers detection is enabled)
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:double">
                        <xs:minInclusive value="1.1" />
                        <xs:maxInclusive value="1.5" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="ArimaSpecType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0">
                <xs:element name="MeanCorrection" type="xs:boolean"/>
                <xs:element name="Mean" type="tss:ParameterType"/>
            </xs:choice>
            <xs:choice>
                <xs:element name="Orders" type="tss:SARIMA_OrderType"/>
                <xs:element name="Model" type="tss:SARIMA_ModelType"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!--CalendarSpec-->

    <xs:complexType name="TradingDaysSpecType">
        <xs:sequence>
            <xs:element name="Calendar" type="xs:string" minOccurs="0"/>
            <xs:element name="TdOption" type="tss:TradingDaysEnum"/>
            <xs:element name="LpOption" type="tss:LengthOfPeriodEnum" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="EasterSpecType">
        <xs:sequence>
            <xs:element name="Duration" minOccurs="0">
                <xs:simpleType>
                    <xs:list>
                        <xs:simpleType>
                            <xs:restriction base="xs:unsignedShort">
                                <xs:minInclusive value="1"/>
                                <xs:maxInclusive value="15"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:list>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="CalendarSpecType">
        <xs:complexContent>
            <xs:extension base="modelling:CalendarSpecType">
                <xs:sequence>
                    <xs:element name="TradingDays" type="trs:TradingDaysSpecType" minOccurs="0"/>
                    <xs:element name="Easter" type="trs:EasterSpecType" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <!--OutlierSpec-->

    <xs:complexType name="OutlierSpecType">
        <xs:complexContent>
            <xs:extension base="modelling:OutlierSpecType">
                <xs:sequence>
                    <xs:element name="Types" type="xs:NMTOKENS">
                        <xs:annotation>
                            <xs:documentation>
                                Tramo Code AIO. Types of outliers that are considered.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="CriticalValue" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Tramo code: VA. It is used to set the critical value for outlier
                                detection
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="2" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                    <xs:element name="EML" type="xs:boolean" default="false" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Tramo code: IMVX. 0 : the fast method of Hannan{Rissanen is used for parameter
                                estimation in the automatic detection and
                                correction of outliers.
                                1 : maximum likelihood estimation is used for parameter
                                estimation in the automatic detection and correction
                                of outliers
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="DeltaTC" default="0.7" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Tramo code: DELTATC. It affects only the TC outlier, which is equal to an
                                impulse divided by (1 - tcrate B).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minExclusive value="0" />
                                <xs:maxExclusive value="1" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--Seats modelling-->
    <xs:complexType name="SeatsSpecType">
        <xs:complexContent>
            <xs:extension base="sa:DecompositionSpecType">
                <xs:sequence>
                    <xs:element name="EpsPhi" minOccurs="0" default="2.0">
                        <xs:annotation>
                            <xs:documentation>
                                Seats code EPSPHI. When the regular AR polynomial contains a
                                complex root, this root is allocated to the seasonal if its frequency
                                differs from one of the seasonal frequencies by less than EPSPHI
                                (measured in degrees). Otherwise, it goes to the transitory
                                component.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minInclusive value="0" />
                                <xs:maxInclusive value="5.0" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                    <xs:element name="RMod" minOccurs="0" default="0.5">
                        <xs:annotation>
                            <xs:documentation>
                                Cutting point for the modulus of an AR real root.
                                If modulus lesser than k it goes to the transitory component, else it goes to the
                                trend-cycle (positive roots) or to the seasonal component (negative roots).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minExclusive value="0.0" />
                                <xs:maxExclusive value="1.0" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                  <xs:element name="SMod" minOccurs="0" default="0.8">
                    <xs:annotation>
                      <xs:documentation>
                        Cutting point for the modulus of a Seasonal AR root.
                        If modulus lesser than k, it goes to the irregular component, else it goes to the
                        to the seasonal component.
                      </xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:double">
                        <xs:minExclusive value="0.0" />
                        <xs:maxExclusive value="1.0" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="StSMod" minOccurs="0" default="0.8">
                    <xs:annotation>
                      <xs:documentation>
                        Cutting point for the modulus of an AR real root.
                        If modulus lesser than k it goes to the transitory component, else it goes to the
                        trend-cycle (positive roots) or to the seasonal component (negative roots).
                      </xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:double">
                        <xs:minExclusive value="0.0" />
                        <xs:maxExclusive value="1.0" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="XL" minOccurs="0" default="0.95">
                        <xs:annotation>
                            <xs:documentation>
                                Seats code: XL. When the modulus of an estimated root falls in the range
                                (XL,1), SEATS sets it equal to 1 if root is in AR polynomial. If root is in
                                MA polynomial, it is set equal to XL.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:double">
                                <xs:minExclusive value="0.5" />
                                <xs:maxExclusive value="1.0" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:element>
                    <xs:element name="ForceModel" type="trs:ApproximationModeEnum" minOccurs="0" default="Legacy">
                        <xs:annotation>
                            <xs:documentation>
                                Corresponds to the Seats code: NOADMISS. When the model does not accept an admissible decomposition,
                                no approximation is made if forceModel equals None, otherwise it is automatically replaced with a decomposable one.
                                Legacy is the old solution, Noisy will add noise into the model
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name ="Method" type ="trs:SeatsEstimationMethodEnum" minOccurs="0" default="Burman">
                        <xs:annotation>
                            <xs:documentation>
                                Estimation method of the components. Burman is the original method. The Kalman smoother
                                should be preferred when the model contain quasi-unit roots in its MA part. Matrix is based 
                                on a paper of McElroy.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Tramo specification-->

    <xs:complexType name="TramoSpecificationType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="modelling:ModellingSpecificationType">
                <xs:sequence>
                    <xs:element name="Transformation" type="trs:TransformationSpecType" minOccurs="0"/>
                    <xs:element name="Estimation" type="trs:EstimationSpecType" minOccurs="0"/>
                    <xs:element name="Regression" type="trs:RegressionSpecType" minOccurs="0"/>
                    <xs:element name="Calendar" type="trs:CalendarSpecType" minOccurs="0"/>
                    <xs:element name="Outliers" type="trs:OutlierSpecType" minOccurs="0"/>
                    <xs:choice>
                        <xs:element name="Arima" type="trs:ArimaSpecType" minOccurs="0"/>
                        <xs:element name="AutoModelling" type="trs:AutoModellingSpecType" minOccurs="0"/>
                    </xs:choice>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="TramoSpecificationEnum">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="TR0"/>
            <xs:enumeration value="TR1"/>
            <xs:enumeration value="TR2"/>
            <xs:enumeration value="TR3"/>
            <xs:enumeration value="TR4"/>
            <xs:enumeration value="TR5"/>
            <xs:enumeration value="TRfull"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:group name="TramoSpecificationGroup">
        <xs:choice>
            <xs:element name="Specification" type="trs:TramoSpecificationType"/>
            <xs:element name="DefaultSpecification" type="trs:TramoSpecificationEnum"/>
        </xs:choice>
    </xs:group>

    <xs:complexType name="TramoAtomicRequestType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Series" type="tss:TsType"/>
            <xs:group  ref="trs:TramoSpecificationGroup"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="TramoRequestType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="trs:TramoAtomicRequestType">
                <xs:sequence>
                    <xs:element name="Context" type="tss:ProcessingContextType"/>
                    <xs:element name="OutputFilter" type="xs:NMTOKENS"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="TramoRequestsType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Item" type="trs:TramoAtomicRequestType" maxOccurs="unbounded"/>
            <xs:element name="Context" type="tss:ProcessingContextType"/>
            <xs:element name="OutputFilter" type="xs:NMTOKENS"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="TramoSpecification" type="trs:TramoSpecificationType"/>
    <xs:element name="TramoRequest" type="trs:TramoRequestType"/>
    <xs:element name="TramoRequests" type="trs:TramoRequestsType"/>

    <!-- TramoSeats specification-->

    <xs:complexType name="TramoSeatsSpecificationType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="trs:TramoSpecificationType">
                <xs:sequence>
                    <xs:element name="Seats" type="trs:SeatsSpecType" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="TramoSeatsSpecificationEnum">
        <xs:annotation>
            <xs:documentation>
                Information on the way a parameter should be used or interpreted.
                A fixed parameter is an "a priori" value, which doesn't result from an estimation procedure.
                An initial parameter is a parameter that should be used as a starting value in estimation procedures.
                An estimated parameter is the results of an estimation procedure.
                A derived parameter has been computed from other (usually estimated)
                parameters.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="RSA0"/>
            <xs:enumeration value="RSA1"/>
            <xs:enumeration value="RSA2"/>
            <xs:enumeration value="RSA3"/>
            <xs:enumeration value="RSA4"/>
            <xs:enumeration value="RSA5"/>
            <xs:enumeration value="RSAfull"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:group name="TramoSeatsSpecificationGroup">
        <xs:choice>
            <xs:element name="Specification" type="trs:TramoSeatsSpecificationType"/>
            <xs:element name="DefaultSpecification" type="trs:TramoSeatsSpecificationEnum"/>
        </xs:choice>
    </xs:group>

    <xs:complexType name="TramoSeatsAtomicRequestType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Series" type="tss:TsType"/>
            <xs:group  ref="trs:TramoSeatsSpecificationGroup"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="TramoSeatsRequestType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="trs:TramoSeatsAtomicRequestType">
                <xs:sequence>
                    <xs:element name="Context" type="tss:ProcessingContextType"/>
                    <xs:element name="OutputFilter" type="xs:NMTOKENS"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="TramoSeatsRequestsType">
        <xs:annotation>
            <xs:documentation>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Item" type="trs:TramoSeatsAtomicRequestType" maxOccurs="unbounded"/>
            <xs:element name="Context" type="tss:ProcessingContextType"/>
            <xs:element name="OutputFilter" type="xs:NMTOKENS"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="TransformationSpec" type="trs:TransformationSpecType"/>
    <xs:element name="EstimationSpec" type="trs:EstimationSpecType"/>
    <xs:element name="RegressionSpec" type="trs:RegressionSpecType"/>
    <xs:element name="TramoSeatsSpecification" type="trs:TramoSeatsSpecificationType"/>
    <xs:element name="TramoSeatsRequest" type="trs:TramoSeatsRequestType"/>
    <xs:element name="TramoSeatsRequests" type="trs:TramoSeatsRequestsType"/>

</xs:schema>
